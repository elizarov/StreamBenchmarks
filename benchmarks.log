# JMH version: 1.19
# VM version: JDK 1.8.0_131, VM 25.131-b11
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/bin/java
# VM options: -Dkotlinx.coroutines.debug=off
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.RangeFilterSumBenchmark.testBaselineLoop

# Run progress: 0.00% complete, ETA 00:12:30
# Fork: 1 of 2
# Warmup Iteration   1: 0.933 ms/op
# Warmup Iteration   2: 0.909 ms/op
# Warmup Iteration   3: 0.915 ms/op
# Warmup Iteration   4: 0.897 ms/op
# Warmup Iteration   5: 0.930 ms/op
Iteration   1: 0.924 ms/op
Iteration   2: 0.891 ms/op
Iteration   3: 0.905 ms/op
Iteration   4: 0.894 ms/op
Iteration   5: 0.921 ms/op
Iteration   6: 0.910 ms/op
Iteration   7: 0.916 ms/op
Iteration   8: 0.901 ms/op
Iteration   9: 0.916 ms/op
Iteration  10: 0.917 ms/op

# Run progress: 2.00% complete, ETA 00:12:37
# Fork: 2 of 2
# Warmup Iteration   1: 0.908 ms/op
# Warmup Iteration   2: 0.906 ms/op
# Warmup Iteration   3: 0.904 ms/op
# Warmup Iteration   4: 0.908 ms/op
# Warmup Iteration   5: 0.913 ms/op
Iteration   1: 0.909 ms/op
Iteration   2: 0.913 ms/op
Iteration   3: 0.895 ms/op
Iteration   4: 0.909 ms/op
Iteration   5: 0.906 ms/op
Iteration   6: 0.916 ms/op
Iteration   7: 0.897 ms/op
Iteration   8: 0.900 ms/op
Iteration   9: 0.909 ms/op
Iteration  10: 0.903 ms/op


Result "benchmark.RangeFilterSumBenchmark.testBaselineLoop":
  0.908 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.891, 0.908, 0.924), stdev = 0.009
  CI (99.9%): [0.900, 0.916] (assumes normal distribution)


# JMH version: 1.19
# VM version: JDK 1.8.0_131, VM 25.131-b11
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/bin/java
# VM options: -Dkotlinx.coroutines.debug=off
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.RangeFilterSumBenchmark.testChannelPipeline

# Run progress: 4.00% complete, ETA 00:12:20
# Fork: 1 of 2
# Warmup Iteration   1: 1541.973 ms/op
# Warmup Iteration   2: 1372.667 ms/op
# Warmup Iteration   3: 1311.633 ms/op
# Warmup Iteration   4: 1305.808 ms/op
# Warmup Iteration   5: 1309.199 ms/op
Iteration   1: 1312.880 ms/op
Iteration   2: 1301.945 ms/op
Iteration   3: 1293.880 ms/op
Iteration   4: 1315.215 ms/op
Iteration   5: 1315.520 ms/op
Iteration   6: 1297.720 ms/op
Iteration   7: 1302.978 ms/op
Iteration   8: 1308.469 ms/op
Iteration   9: 1303.862 ms/op
Iteration  10: 1385.556 ms/op

# Run progress: 6.00% complete, ETA 00:13:21
# Fork: 2 of 2
# Warmup Iteration   1: 1697.958 ms/op
# Warmup Iteration   2: 1427.859 ms/op
# Warmup Iteration   3: 1348.213 ms/op
# Warmup Iteration   4: 1352.164 ms/op
# Warmup Iteration   5: 1332.803 ms/op
Iteration   1: 1351.694 ms/op
Iteration   2: 1363.768 ms/op
Iteration   3: 1351.439 ms/op
Iteration   4: 1365.756 ms/op
Iteration   5: 1362.449 ms/op
Iteration   6: 1352.360 ms/op
Iteration   7: 1355.325 ms/op
Iteration   8: 1368.379 ms/op
Iteration   9: 1371.481 ms/op
Iteration  10: 1348.220 ms/op


Result "benchmark.RangeFilterSumBenchmark.testChannelPipeline":
  1336.445 ±(99.9%) 26.018 ms/op [Average]
  (min, avg, max) = (1293.880, 1336.445, 1385.556), stdev = 29.962
  CI (99.9%): [1310.427, 1362.463] (assumes normal distribution)


# JMH version: 1.19
# VM version: JDK 1.8.0_131, VM 25.131-b11
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/bin/java
# VM options: -Dkotlinx.coroutines.debug=off
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.RangeFilterSumBenchmark.testChannelPipelineUnconfined

# Run progress: 8.00% complete, ETA 00:13:51
# Fork: 1 of 2
# Warmup Iteration   1: 390.098 ms/op
# Warmup Iteration   2: 327.961 ms/op
# Warmup Iteration   3: 326.492 ms/op
# Warmup Iteration   4: 331.296 ms/op
# Warmup Iteration   5: 325.624 ms/op
Iteration   1: 328.998 ms/op
Iteration   2: 323.607 ms/op
Iteration   3: 325.851 ms/op
Iteration   4: 325.712 ms/op
Iteration   5: 325.977 ms/op
Iteration   6: 325.882 ms/op
Iteration   7: 324.698 ms/op
Iteration   8: 330.871 ms/op
Iteration   9: 330.231 ms/op
Iteration  10: 337.359 ms/op

# Run progress: 10.00% complete, ETA 00:13:46
# Fork: 2 of 2
# Warmup Iteration   1: 386.748 ms/op
# Warmup Iteration   2: 324.148 ms/op
# Warmup Iteration   3: 321.797 ms/op
# Warmup Iteration   4: 323.768 ms/op
# Warmup Iteration   5: 325.840 ms/op
Iteration   1: 323.784 ms/op
Iteration   2: 322.004 ms/op
Iteration   3: 328.315 ms/op
Iteration   4: 324.356 ms/op
Iteration   5: 324.542 ms/op
Iteration   6: 321.980 ms/op
Iteration   7: 322.458 ms/op
Iteration   8: 323.889 ms/op
Iteration   9: 329.987 ms/op
Iteration  10: 325.543 ms/op


Result "benchmark.RangeFilterSumBenchmark.testChannelPipelineUnconfined":
  326.302 ±(99.9%) 3.247 ms/op [Average]
  (min, avg, max) = (321.980, 326.302, 337.359), stdev = 3.739
  CI (99.9%): [323.055, 329.549] (assumes normal distribution)


# JMH version: 1.19
# VM version: JDK 1.8.0_131, VM 25.131-b11
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/bin/java
# VM options: -Dkotlinx.coroutines.debug=off
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.RangeFilterSumBenchmark.testFlowable

# Run progress: 12.00% complete, ETA 00:13:37
# Fork: 1 of 2
# Warmup Iteration   1: 6.117 ms/op
# Warmup Iteration   2: 6.310 ms/op
# Warmup Iteration   3: 4.414 ms/op
# Warmup Iteration   4: 4.397 ms/op
# Warmup Iteration   5: 4.414 ms/op
Iteration   1: 4.408 ms/op
Iteration   2: 4.454 ms/op
Iteration   3: 4.591 ms/op
Iteration   4: 4.431 ms/op
Iteration   5: 4.425 ms/op
Iteration   6: 4.504 ms/op
Iteration   7: 4.488 ms/op
Iteration   8: 4.394 ms/op
Iteration   9: 4.505 ms/op
Iteration  10: 4.434 ms/op

# Run progress: 14.00% complete, ETA 00:12:59
# Fork: 2 of 2
# Warmup Iteration   1: 6.037 ms/op
# Warmup Iteration   2: 6.310 ms/op
# Warmup Iteration   3: 4.418 ms/op
# Warmup Iteration   4: 4.396 ms/op
# Warmup Iteration   5: 4.373 ms/op
Iteration   1: 4.480 ms/op
Iteration   2: 4.433 ms/op
Iteration   3: 4.355 ms/op
Iteration   4: 4.373 ms/op
Iteration   5: 4.438 ms/op
Iteration   6: 4.471 ms/op
Iteration   7: 4.471 ms/op
Iteration   8: 4.482 ms/op
Iteration   9: 4.447 ms/op
Iteration  10: 4.601 ms/op


Result "benchmark.RangeFilterSumBenchmark.testFlowable":
  4.459 ±(99.9%) 0.054 ms/op [Average]
  (min, avg, max) = (4.355, 4.459, 4.601), stdev = 0.062
  CI (99.9%): [4.406, 4.513] (assumes normal distribution)


# JMH version: 1.19
# VM version: JDK 1.8.0_131, VM 25.131-b11
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/bin/java
# VM options: -Dkotlinx.coroutines.debug=off
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.RangeFilterSumBenchmark.testFlowableFromCoroutinePublish

# Run progress: 16.00% complete, ETA 00:12:27
# Fork: 1 of 2
# Warmup Iteration   1: 33.064 ms/op
# Warmup Iteration   2: 27.920 ms/op
# Warmup Iteration   3: 27.601 ms/op
# Warmup Iteration   4: 27.945 ms/op
# Warmup Iteration   5: 28.094 ms/op
Iteration   1: 28.142 ms/op
Iteration   2: 27.823 ms/op
Iteration   3: 27.575 ms/op
Iteration   4: 27.585 ms/op
Iteration   5: 27.741 ms/op
Iteration   6: 27.936 ms/op
Iteration   7: 27.607 ms/op
Iteration   8: 27.566 ms/op
Iteration   9: 28.053 ms/op
Iteration  10: 27.638 ms/op

# Run progress: 18.00% complete, ETA 00:12:00
# Fork: 2 of 2
# Warmup Iteration   1: 32.575 ms/op
# Warmup Iteration   2: 27.264 ms/op
# Warmup Iteration   3: 28.223 ms/op
# Warmup Iteration   4: 27.910 ms/op
# Warmup Iteration   5: 28.272 ms/op
Iteration   1: 27.686 ms/op
Iteration   2: 27.458 ms/op
Iteration   3: 27.233 ms/op
Iteration   4: 28.179 ms/op
Iteration   5: 27.902 ms/op
Iteration   6: 27.313 ms/op
Iteration   7: 27.192 ms/op
Iteration   8: 28.008 ms/op
Iteration   9: 28.152 ms/op
Iteration  10: 27.507 ms/op


Result "benchmark.RangeFilterSumBenchmark.testFlowableFromCoroutinePublish":
  27.715 ±(99.9%) 0.263 ms/op [Average]
  (min, avg, max) = (27.192, 27.715, 28.179), stdev = 0.303
  CI (99.9%): [27.452, 27.978] (assumes normal distribution)


# JMH version: 1.19
# VM version: JDK 1.8.0_131, VM 25.131-b11
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/bin/java
# VM options: -Dkotlinx.coroutines.debug=off
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.RangeFilterSumBenchmark.testFlowableFromCoroutinePublishUnconfined

# Run progress: 20.00% complete, ETA 00:11:34
# Fork: 1 of 2
# Warmup Iteration   1: 32.232 ms/op
# Warmup Iteration   2: 27.084 ms/op
# Warmup Iteration   3: 27.743 ms/op
# Warmup Iteration   4: 28.029 ms/op
# Warmup Iteration   5: 27.983 ms/op
Iteration   1: 28.695 ms/op
Iteration   2: 28.260 ms/op
Iteration   3: 28.867 ms/op
Iteration   4: 29.188 ms/op
Iteration   5: 28.784 ms/op
Iteration   6: 28.246 ms/op
Iteration   7: 28.519 ms/op
Iteration   8: 28.757 ms/op
Iteration   9: 29.145 ms/op
Iteration  10: 28.830 ms/op

# Run progress: 22.00% complete, ETA 00:11:10
# Fork: 2 of 2
# Warmup Iteration   1: 32.315 ms/op
# Warmup Iteration   2: 27.222 ms/op
# Warmup Iteration   3: 28.388 ms/op
# Warmup Iteration   4: 28.371 ms/op
# Warmup Iteration   5: 28.144 ms/op
Iteration   1: 28.298 ms/op
Iteration   2: 27.895 ms/op
Iteration   3: 29.002 ms/op
Iteration   4: 29.371 ms/op
Iteration   5: 30.873 ms/op
Iteration   6: 30.966 ms/op
Iteration   7: 30.694 ms/op
Iteration   8: 31.182 ms/op
Iteration   9: 30.987 ms/op
Iteration  10: 31.153 ms/op


Result "benchmark.RangeFilterSumBenchmark.testFlowableFromCoroutinePublishUnconfined":
  29.386 ±(99.9%) 0.978 ms/op [Average]
  (min, avg, max) = (27.895, 29.386, 31.182), stdev = 1.127
  CI (99.9%): [28.407, 30.364] (assumes normal distribution)


# JMH version: 1.19
# VM version: JDK 1.8.0_131, VM 25.131-b11
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/bin/java
# VM options: -Dkotlinx.coroutines.debug=off
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.RangeFilterSumBenchmark.testFlowableThread

# Run progress: 24.00% complete, ETA 00:10:48
# Fork: 1 of 2
# Warmup Iteration   1: 8.236 ms/op
# Warmup Iteration   2: 6.659 ms/op
# Warmup Iteration   3: 5.802 ms/op
# Warmup Iteration   4: 5.821 ms/op
# Warmup Iteration   5: 5.839 ms/op
Iteration   1: 5.823 ms/op
Iteration   2: 5.800 ms/op
Iteration   3: 5.781 ms/op
Iteration   4: 5.832 ms/op
Iteration   5: 5.823 ms/op
Iteration   6: 5.862 ms/op
Iteration   7: 5.888 ms/op
Iteration   8: 5.808 ms/op
Iteration   9: 5.841 ms/op
Iteration  10: 5.844 ms/op

# Run progress: 26.00% complete, ETA 00:10:26
# Fork: 2 of 2
# Warmup Iteration   1: 8.288 ms/op
# Warmup Iteration   2: 6.587 ms/op
# Warmup Iteration   3: 5.801 ms/op
# Warmup Iteration   4: 5.824 ms/op
# Warmup Iteration   5: 5.823 ms/op
Iteration   1: 5.819 ms/op
Iteration   2: 5.863 ms/op
Iteration   3: 5.946 ms/op
Iteration   4: 5.819 ms/op
Iteration   5: 5.892 ms/op
Iteration   6: 5.812 ms/op
Iteration   7: 5.803 ms/op
Iteration   8: 5.877 ms/op
Iteration   9: 5.880 ms/op
Iteration  10: 5.825 ms/op


Result "benchmark.RangeFilterSumBenchmark.testFlowableThread":
  5.842 ±(99.9%) 0.035 ms/op [Average]
  (min, avg, max) = (5.781, 5.842, 5.946), stdev = 0.040
  CI (99.9%): [5.807, 5.876] (assumes normal distribution)


# JMH version: 1.19
# VM version: JDK 1.8.0_131, VM 25.131-b11
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/bin/java
# VM options: -Dkotlinx.coroutines.debug=off
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.RangeFilterSumBenchmark.testFlowableWithCoroutineFilter

# Run progress: 28.00% complete, ETA 00:10:06
# Fork: 1 of 2
# Warmup Iteration   1: 364.514 ms/op
# Warmup Iteration   2: 302.096 ms/op
# Warmup Iteration   3: 307.655 ms/op
# Warmup Iteration   4: 304.230 ms/op
# Warmup Iteration   5: 301.234 ms/op
Iteration   1: 299.429 ms/op
Iteration   2: 307.018 ms/op
Iteration   3: 304.574 ms/op
Iteration   4: 302.637 ms/op
Iteration   5: 300.011 ms/op
Iteration   6: 304.134 ms/op
Iteration   7: 301.063 ms/op
Iteration   8: 299.187 ms/op
Iteration   9: 302.463 ms/op
Iteration  10: 302.653 ms/op

# Run progress: 30.00% complete, ETA 00:09:52
# Fork: 2 of 2
# Warmup Iteration   1: 364.435 ms/op
# Warmup Iteration   2: 306.559 ms/op
# Warmup Iteration   3: 307.246 ms/op
# Warmup Iteration   4: 307.757 ms/op
# Warmup Iteration   5: 308.954 ms/op
Iteration   1: 301.231 ms/op
Iteration   2: 307.761 ms/op
Iteration   3: 305.998 ms/op
Iteration   4: 311.122 ms/op
Iteration   5: 309.865 ms/op
Iteration   6: 307.916 ms/op
Iteration   7: 307.770 ms/op
Iteration   8: 312.663 ms/op
Iteration   9: 307.534 ms/op
Iteration  10: 308.966 ms/op


Result "benchmark.RangeFilterSumBenchmark.testFlowableWithCoroutineFilter":
  305.200 ±(99.9%) 3.496 ms/op [Average]
  (min, avg, max) = (299.187, 305.200, 312.663), stdev = 4.026
  CI (99.9%): [301.704, 308.696] (assumes normal distribution)


# JMH version: 1.19
# VM version: JDK 1.8.0_131, VM 25.131-b11
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/bin/java
# VM options: -Dkotlinx.coroutines.debug=off
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.RangeFilterSumBenchmark.testFlux

# Run progress: 32.00% complete, ETA 00:09:39
# Fork: 1 of 2
# Warmup Iteration   1: [DEBUG] (benchmark.RangeFilterSumBenchmark.testFlux-jmh-worker-1) Using Console logging
5.923 ms/op
# Warmup Iteration   2: 5.928 ms/op
# Warmup Iteration   3: 4.256 ms/op
# Warmup Iteration   4: 4.001 ms/op
# Warmup Iteration   5: 3.889 ms/op
Iteration   1: 3.989 ms/op
Iteration   2: 4.547 ms/op
Iteration   3: 4.284 ms/op
Iteration   4: 4.424 ms/op
Iteration   5: 4.199 ms/op
Iteration   6: 4.159 ms/op
Iteration   7: 4.279 ms/op
Iteration   8: 3.940 ms/op
Iteration   9: 4.539 ms/op
Iteration  10: 3.996 ms/op

# Run progress: 34.00% complete, ETA 00:09:19
# Fork: 2 of 2
# Warmup Iteration   1: [DEBUG] (benchmark.RangeFilterSumBenchmark.testFlux-jmh-worker-1) Using Console logging
5.939 ms/op
# Warmup Iteration   2: 5.795 ms/op
# Warmup Iteration   3: 4.541 ms/op
# Warmup Iteration   4: 3.929 ms/op
# Warmup Iteration   5: 3.927 ms/op
Iteration   1: 3.979 ms/op
Iteration   2: 4.569 ms/op
Iteration   3: 4.119 ms/op
Iteration   4: 4.354 ms/op
Iteration   5: 4.134 ms/op
Iteration   6: 4.503 ms/op
Iteration   7: 4.339 ms/op
Iteration   8: 4.345 ms/op
Iteration   9: 3.964 ms/op
Iteration  10: 4.394 ms/op


Result "benchmark.RangeFilterSumBenchmark.testFlux":
  4.253 ±(99.9%) 0.183 ms/op [Average]
  (min, avg, max) = (3.940, 4.253, 4.569), stdev = 0.211
  CI (99.9%): [4.070, 4.436] (assumes normal distribution)


# JMH version: 1.19
# VM version: JDK 1.8.0_131, VM 25.131-b11
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/bin/java
# VM options: -Dkotlinx.coroutines.debug=off
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.RangeFilterSumBenchmark.testFluxFromCoroutinePublish

# Run progress: 36.00% complete, ETA 00:09:00
# Fork: 1 of 2
# Warmup Iteration   1: [DEBUG] (benchmark.RangeFilterSumBenchmark.testFluxFromCoroutinePublish-jmh-worker-1) Using Console logging
30.499 ms/op
# Warmup Iteration   2: 26.168 ms/op
# Warmup Iteration   3: 24.971 ms/op
# Warmup Iteration   4: 25.073 ms/op
# Warmup Iteration   5: 25.170 ms/op
Iteration   1: 24.575 ms/op
Iteration   2: 24.971 ms/op
Iteration   3: 25.166 ms/op
Iteration   4: 27.996 ms/op
Iteration   5: 25.477 ms/op
Iteration   6: 24.820 ms/op
Iteration   7: 24.771 ms/op
Iteration   8: 25.272 ms/op
Iteration   9: 25.017 ms/op
Iteration  10: 24.719 ms/op

# Run progress: 38.00% complete, ETA 00:08:41
# Fork: 2 of 2
# Warmup Iteration   1: [DEBUG] (benchmark.RangeFilterSumBenchmark.testFluxFromCoroutinePublish-jmh-worker-1) Using Console logging
30.573 ms/op
# Warmup Iteration   2: 25.590 ms/op
# Warmup Iteration   3: 25.044 ms/op
# Warmup Iteration   4: 24.583 ms/op
# Warmup Iteration   5: 24.693 ms/op
Iteration   1: 24.692 ms/op
Iteration   2: 24.447 ms/op
Iteration   3: 24.999 ms/op
Iteration   4: 25.390 ms/op
Iteration   5: 24.690 ms/op
Iteration   6: 24.600 ms/op
Iteration   7: 25.210 ms/op
Iteration   8: 25.227 ms/op
Iteration   9: 25.705 ms/op
Iteration  10: 25.899 ms/op


Result "benchmark.RangeFilterSumBenchmark.testFluxFromCoroutinePublish":
  25.182 ±(99.9%) 0.667 ms/op [Average]
  (min, avg, max) = (24.447, 25.182, 27.996), stdev = 0.768
  CI (99.9%): [24.515, 25.849] (assumes normal distribution)


# JMH version: 1.19
# VM version: JDK 1.8.0_131, VM 25.131-b11
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/bin/java
# VM options: -Dkotlinx.coroutines.debug=off
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.RangeFilterSumBenchmark.testFluxFromCoroutinePublishUnconfined

# Run progress: 40.00% complete, ETA 00:08:22
# Fork: 1 of 2
# Warmup Iteration   1: [DEBUG] (benchmark.RangeFilterSumBenchmark.testFluxFromCoroutinePublishUnconfined-jmh-worker-1) Using Console logging
30.622 ms/op
# Warmup Iteration   2: 26.144 ms/op
# Warmup Iteration   3: 24.462 ms/op
# Warmup Iteration   4: 24.643 ms/op
# Warmup Iteration   5: 24.697 ms/op
Iteration   1: 25.126 ms/op
Iteration   2: 25.545 ms/op
Iteration   3: 25.355 ms/op
Iteration   4: 25.489 ms/op
Iteration   5: 25.347 ms/op
Iteration   6: 25.534 ms/op
Iteration   7: 25.986 ms/op
Iteration   8: 26.206 ms/op
Iteration   9: 26.050 ms/op
Iteration  10: 25.882 ms/op

# Run progress: 42.00% complete, ETA 00:08:04
# Fork: 2 of 2
# Warmup Iteration   1: [DEBUG] (benchmark.RangeFilterSumBenchmark.testFluxFromCoroutinePublishUnconfined-jmh-worker-1) Using Console logging
30.261 ms/op
# Warmup Iteration   2: 26.146 ms/op
# Warmup Iteration   3: 24.675 ms/op
# Warmup Iteration   4: 24.733 ms/op
# Warmup Iteration   5: 25.182 ms/op
Iteration   1: 24.738 ms/op
Iteration   2: 24.739 ms/op
Iteration   3: 25.387 ms/op
Iteration   4: 25.246 ms/op
Iteration   5: 25.210 ms/op
Iteration   6: 25.311 ms/op
Iteration   7: 25.884 ms/op
Iteration   8: 26.530 ms/op
Iteration   9: 26.569 ms/op
Iteration  10: 26.806 ms/op


Result "benchmark.RangeFilterSumBenchmark.testFluxFromCoroutinePublishUnconfined":
  25.647 ±(99.9%) 0.502 ms/op [Average]
  (min, avg, max) = (24.738, 25.647, 26.806), stdev = 0.578
  CI (99.9%): [25.145, 26.149] (assumes normal distribution)


# JMH version: 1.19
# VM version: JDK 1.8.0_131, VM 25.131-b11
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/bin/java
# VM options: -Dkotlinx.coroutines.debug=off
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.RangeFilterSumBenchmark.testFluxThread

# Run progress: 44.00% complete, ETA 00:07:45
# Fork: 1 of 2
# Warmup Iteration   1: [DEBUG] (benchmark.RangeFilterSumBenchmark.testFluxThread-jmh-worker-1) Using Console logging
10.386 ms/op
# Warmup Iteration   2: 8.392 ms/op
# Warmup Iteration   3: 7.276 ms/op
# Warmup Iteration   4: 7.331 ms/op
# Warmup Iteration   5: 7.304 ms/op
Iteration   1: 7.198 ms/op
Iteration   2: 7.202 ms/op
Iteration   3: 7.143 ms/op
Iteration   4: 7.187 ms/op
Iteration   5: 7.311 ms/op
Iteration   6: 7.258 ms/op
Iteration   7: 7.182 ms/op
Iteration   8: 7.327 ms/op
Iteration   9: 7.130 ms/op
Iteration  10: 7.185 ms/op

# Run progress: 46.00% complete, ETA 00:07:27
# Fork: 2 of 2
# Warmup Iteration   1: [DEBUG] (benchmark.RangeFilterSumBenchmark.testFluxThread-jmh-worker-1) Using Console logging
10.449 ms/op
# Warmup Iteration   2: 8.321 ms/op
# Warmup Iteration   3: 7.195 ms/op
# Warmup Iteration   4: 7.331 ms/op
# Warmup Iteration   5: 7.167 ms/op
Iteration   1: 7.271 ms/op
Iteration   2: 7.343 ms/op
Iteration   3: 7.537 ms/op
Iteration   4: 7.458 ms/op
Iteration   5: 7.338 ms/op
Iteration   6: 7.478 ms/op
Iteration   7: 7.533 ms/op
Iteration   8: 7.482 ms/op
Iteration   9: 7.436 ms/op
Iteration  10: 7.305 ms/op


Result "benchmark.RangeFilterSumBenchmark.testFluxThread":
  7.315 ±(99.9%) 0.115 ms/op [Average]
  (min, avg, max) = (7.130, 7.315, 7.537), stdev = 0.133
  CI (99.9%): [7.200, 7.430] (assumes normal distribution)


# JMH version: 1.19
# VM version: JDK 1.8.0_131, VM 25.131-b11
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/bin/java
# VM options: -Dkotlinx.coroutines.debug=off
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.RangeFilterSumBenchmark.testFluxWithCoroutineFilter

# Run progress: 48.00% complete, ETA 00:07:10
# Fork: 1 of 2
# Warmup Iteration   1: [DEBUG] (benchmark.RangeFilterSumBenchmark.testFluxWithCoroutineFilter-jmh-worker-1) Using Console logging
393.951 ms/op
# Warmup Iteration   2: 299.768 ms/op
# Warmup Iteration   3: 301.820 ms/op
# Warmup Iteration   4: 302.192 ms/op
# Warmup Iteration   5: 302.794 ms/op
Iteration   1: 304.695 ms/op
Iteration   2: 299.330 ms/op
Iteration   3: 304.348 ms/op
Iteration   4: 300.473 ms/op
Iteration   5: 298.374 ms/op
Iteration   6: 302.107 ms/op
Iteration   7: 297.954 ms/op
Iteration   8: 304.253 ms/op
Iteration   9: 302.121 ms/op
Iteration  10: 299.990 ms/op

# Run progress: 50.00% complete, ETA 00:06:55
# Fork: 2 of 2
# Warmup Iteration   1: [DEBUG] (benchmark.RangeFilterSumBenchmark.testFluxWithCoroutineFilter-jmh-worker-1) Using Console logging
387.613 ms/op
# Warmup Iteration   2: 311.180 ms/op
# Warmup Iteration   3: 323.642 ms/op
# Warmup Iteration   4: 313.956 ms/op
# Warmup Iteration   5: 313.404 ms/op
Iteration   1: 313.947 ms/op
Iteration   2: 309.224 ms/op
Iteration   3: 311.910 ms/op
Iteration   4: 310.347 ms/op
Iteration   5: 312.461 ms/op
Iteration   6: 310.337 ms/op
Iteration   7: 309.663 ms/op
Iteration   8: 316.070 ms/op
Iteration   9: 312.343 ms/op
Iteration  10: 310.432 ms/op


Result "benchmark.RangeFilterSumBenchmark.testFluxWithCoroutineFilter":
  306.519 ±(99.9%) 4.996 ms/op [Average]
  (min, avg, max) = (297.954, 306.519, 316.070), stdev = 5.754
  CI (99.9%): [301.523, 311.515] (assumes normal distribution)


# JMH version: 1.19
# VM version: JDK 1.8.0_131, VM 25.131-b11
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/bin/java
# VM options: -Dkotlinx.coroutines.debug=off
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.RangeFilterSumBenchmark.testJavaStream

# Run progress: 52.00% complete, ETA 00:06:41
# Fork: 1 of 2
# Warmup Iteration   1: 9.762 ms/op
# Warmup Iteration   2: 8.601 ms/op
# Warmup Iteration   3: 7.657 ms/op
# Warmup Iteration   4: 7.552 ms/op
# Warmup Iteration   5: 7.635 ms/op
Iteration   1: 7.702 ms/op
Iteration   2: 7.565 ms/op
Iteration   3: 7.686 ms/op
Iteration   4: 7.591 ms/op
Iteration   5: 7.617 ms/op
Iteration   6: 7.682 ms/op
Iteration   7: 7.560 ms/op
Iteration   8: 7.713 ms/op
Iteration   9: 7.734 ms/op
Iteration  10: 7.769 ms/op

# Run progress: 54.00% complete, ETA 00:06:23
# Fork: 2 of 2
# Warmup Iteration   1: 10.086 ms/op
# Warmup Iteration   2: 8.827 ms/op
# Warmup Iteration   3: 7.556 ms/op
# Warmup Iteration   4: 7.671 ms/op
# Warmup Iteration   5: 7.598 ms/op
Iteration   1: 7.637 ms/op
Iteration   2: 7.540 ms/op
Iteration   3: 7.589 ms/op
Iteration   4: 7.621 ms/op
Iteration   5: 7.648 ms/op
Iteration   6: 7.670 ms/op
Iteration   7: 7.640 ms/op
Iteration   8: 7.724 ms/op
Iteration   9: 7.632 ms/op
Iteration  10: 7.656 ms/op


Result "benchmark.RangeFilterSumBenchmark.testJavaStream":
  7.649 ±(99.9%) 0.054 ms/op [Average]
  (min, avg, max) = (7.540, 7.649, 7.769), stdev = 0.062
  CI (99.9%): [7.595, 7.703] (assumes normal distribution)


# JMH version: 1.19
# VM version: JDK 1.8.0_131, VM 25.131-b11
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/bin/java
# VM options: -Dkotlinx.coroutines.debug=off
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.RangeFilterSumBenchmark.testObservable

# Run progress: 56.00% complete, ETA 00:06:05
# Fork: 1 of 2
# Warmup Iteration   1: 6.009 ms/op
# Warmup Iteration   2: 6.318 ms/op
# Warmup Iteration   3: 4.266 ms/op
# Warmup Iteration   4: 4.395 ms/op
# Warmup Iteration   5: 4.418 ms/op
Iteration   1: 4.373 ms/op
Iteration   2: 4.361 ms/op
Iteration   3: 4.358 ms/op
Iteration   4: 4.440 ms/op
Iteration   5: 4.433 ms/op
Iteration   6: 4.341 ms/op
Iteration   7: 4.434 ms/op
Iteration   8: 4.710 ms/op
Iteration   9: 5.317 ms/op
Iteration  10: 5.313 ms/op

# Run progress: 58.00% complete, ETA 00:05:48
# Fork: 2 of 2
# Warmup Iteration   1: 6.101 ms/op
# Warmup Iteration   2: 6.388 ms/op
# Warmup Iteration   3: 4.340 ms/op
# Warmup Iteration   4: 4.383 ms/op
# Warmup Iteration   5: 4.372 ms/op
Iteration   1: 4.353 ms/op
Iteration   2: 4.384 ms/op
Iteration   3: 4.415 ms/op
Iteration   4: 4.398 ms/op
Iteration   5: 4.439 ms/op
Iteration   6: 4.341 ms/op
Iteration   7: 4.283 ms/op
Iteration   8: 4.647 ms/op
Iteration   9: 5.306 ms/op
Iteration  10: 5.366 ms/op


Result "benchmark.RangeFilterSumBenchmark.testObservable":
  4.601 ±(99.9%) 0.334 ms/op [Average]
  (min, avg, max) = (4.283, 4.601, 5.366), stdev = 0.385
  CI (99.9%): [4.267, 4.935] (assumes normal distribution)


# JMH version: 1.19
# VM version: JDK 1.8.0_131, VM 25.131-b11
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/bin/java
# VM options: -Dkotlinx.coroutines.debug=off
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.RangeFilterSumBenchmark.testObservableFromCoroutinePublish

# Run progress: 60.00% complete, ETA 00:05:31
# Fork: 1 of 2
# Warmup Iteration   1: 30.750 ms/op
# Warmup Iteration   2: 26.713 ms/op
# Warmup Iteration   3: 24.939 ms/op
# Warmup Iteration   4: 25.589 ms/op
# Warmup Iteration   5: 25.743 ms/op
Iteration   1: 25.890 ms/op
Iteration   2: 24.929 ms/op
Iteration   3: 25.058 ms/op
Iteration   4: 25.928 ms/op
Iteration   5: 25.444 ms/op
Iteration   6: 26.185 ms/op
Iteration   7: 26.647 ms/op
Iteration   8: 26.492 ms/op
Iteration   9: 25.841 ms/op
Iteration  10: 25.680 ms/op

# Run progress: 62.00% complete, ETA 00:05:13
# Fork: 2 of 2
# Warmup Iteration   1: 29.933 ms/op
# Warmup Iteration   2: 26.904 ms/op
# Warmup Iteration   3: 26.188 ms/op
# Warmup Iteration   4: 25.787 ms/op
# Warmup Iteration   5: 25.234 ms/op
Iteration   1: 25.869 ms/op
Iteration   2: 25.200 ms/op
Iteration   3: 25.175 ms/op
Iteration   4: 25.391 ms/op
Iteration   5: 25.769 ms/op
Iteration   6: 25.387 ms/op
Iteration   7: 26.474 ms/op
Iteration   8: 25.797 ms/op
Iteration   9: 25.563 ms/op
Iteration  10: 25.368 ms/op


Result "benchmark.RangeFilterSumBenchmark.testObservableFromCoroutinePublish":
  25.704 ±(99.9%) 0.419 ms/op [Average]
  (min, avg, max) = (24.929, 25.704, 26.647), stdev = 0.483
  CI (99.9%): [25.285, 26.124] (assumes normal distribution)


# JMH version: 1.19
# VM version: JDK 1.8.0_131, VM 25.131-b11
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/bin/java
# VM options: -Dkotlinx.coroutines.debug=off
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.RangeFilterSumBenchmark.testObservableFromCoroutinePublishUnconfined

# Run progress: 64.00% complete, ETA 00:04:56
# Fork: 1 of 2
# Warmup Iteration   1: 29.711 ms/op
# Warmup Iteration   2: 26.408 ms/op
# Warmup Iteration   3: 25.165 ms/op
# Warmup Iteration   4: 25.722 ms/op
# Warmup Iteration   5: 25.877 ms/op
Iteration   1: 25.612 ms/op
Iteration   2: 25.263 ms/op
Iteration   3: 25.948 ms/op
Iteration   4: 25.941 ms/op
Iteration   5: 25.890 ms/op
Iteration   6: 26.833 ms/op
Iteration   7: 26.809 ms/op
Iteration   8: 27.240 ms/op
Iteration   9: 25.862 ms/op
Iteration  10: 27.118 ms/op

# Run progress: 66.00% complete, ETA 00:04:39
# Fork: 2 of 2
# Warmup Iteration   1: 29.104 ms/op
# Warmup Iteration   2: 25.691 ms/op
# Warmup Iteration   3: 25.965 ms/op
# Warmup Iteration   4: 26.209 ms/op
# Warmup Iteration   5: 25.797 ms/op
Iteration   1: 26.729 ms/op
Iteration   2: 26.267 ms/op
Iteration   3: 27.661 ms/op
Iteration   4: 28.246 ms/op
Iteration   5: 25.423 ms/op
Iteration   6: 25.255 ms/op
Iteration   7: 25.863 ms/op
Iteration   8: 26.047 ms/op
Iteration   9: 25.466 ms/op
Iteration  10: 25.621 ms/op


Result "benchmark.RangeFilterSumBenchmark.testObservableFromCoroutinePublishUnconfined":
  26.255 ±(99.9%) 0.727 ms/op [Average]
  (min, avg, max) = (25.255, 26.255, 28.246), stdev = 0.837
  CI (99.9%): [25.528, 26.982] (assumes normal distribution)


# JMH version: 1.19
# VM version: JDK 1.8.0_131, VM 25.131-b11
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/bin/java
# VM options: -Dkotlinx.coroutines.debug=off
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.RangeFilterSumBenchmark.testObservableThread

# Run progress: 68.00% complete, ETA 00:04:22
# Fork: 1 of 2
# Warmup Iteration   1: 9.480 ms/op
# Warmup Iteration   2: 7.711 ms/op
# Warmup Iteration   3: 6.582 ms/op
# Warmup Iteration   4: 6.670 ms/op
# Warmup Iteration   5: 6.707 ms/op
Iteration   1: 6.585 ms/op
Iteration   2: 6.597 ms/op
Iteration   3: 6.583 ms/op
Iteration   4: 6.627 ms/op
Iteration   5: 6.734 ms/op
Iteration   6: 6.730 ms/op
Iteration   7: 6.681 ms/op
Iteration   8: 6.575 ms/op
Iteration   9: 6.663 ms/op
Iteration  10: 6.662 ms/op

# Run progress: 70.00% complete, ETA 00:04:06
# Fork: 2 of 2
# Warmup Iteration   1: 9.566 ms/op
# Warmup Iteration   2: 7.537 ms/op
# Warmup Iteration   3: 6.662 ms/op
# Warmup Iteration   4: 6.772 ms/op
# Warmup Iteration   5: 6.605 ms/op
Iteration   1: 6.626 ms/op
Iteration   2: 6.577 ms/op
Iteration   3: 6.607 ms/op
Iteration   4: 6.514 ms/op
Iteration   5: 6.632 ms/op
Iteration   6: 6.647 ms/op
Iteration   7: 6.696 ms/op
Iteration   8: 6.613 ms/op
Iteration   9: 6.580 ms/op
Iteration  10: 6.603 ms/op


Result "benchmark.RangeFilterSumBenchmark.testObservableThread":
  6.627 ±(99.9%) 0.048 ms/op [Average]
  (min, avg, max) = (6.514, 6.627, 6.734), stdev = 0.056
  CI (99.9%): [6.578, 6.675] (assumes normal distribution)


# JMH version: 1.19
# VM version: JDK 1.8.0_131, VM 25.131-b11
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/bin/java
# VM options: -Dkotlinx.coroutines.debug=off
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.RangeFilterSumBenchmark.testObservableWithCoroutineFilter

# Run progress: 72.00% complete, ETA 00:03:49
# Fork: 1 of 2
# Warmup Iteration   1: 301.477 ms/op
# Warmup Iteration   2: 180.105 ms/op
# Warmup Iteration   3: 208.863 ms/op
# Warmup Iteration   4: 146.365 ms/op
# Warmup Iteration   5: 152.160 ms/op
Iteration   1: 142.644 ms/op
Iteration   2: 138.078 ms/op
Iteration   3: 158.385 ms/op
Iteration   4: 138.708 ms/op
Iteration   5: 143.617 ms/op
Iteration   6: 133.860 ms/op
Iteration   7: 149.270 ms/op
Iteration   8: 136.678 ms/op
Iteration   9: 148.392 ms/op
Iteration  10: 135.197 ms/op

# Run progress: 74.00% complete, ETA 00:03:33
# Fork: 2 of 2
# Warmup Iteration   1: 290.898 ms/op
# Warmup Iteration   2: 175.137 ms/op
# Warmup Iteration   3: 202.897 ms/op
# Warmup Iteration   4: 151.277 ms/op
# Warmup Iteration   5: 140.429 ms/op
Iteration   1: 149.420 ms/op
Iteration   2: 135.865 ms/op
Iteration   3: 146.838 ms/op
Iteration   4: 156.362 ms/op
Iteration   5: 137.988 ms/op
Iteration   6: 150.243 ms/op
Iteration   7: 133.530 ms/op
Iteration   8: 163.894 ms/op
Iteration   9: 135.345 ms/op
Iteration  10: 134.854 ms/op


Result "benchmark.RangeFilterSumBenchmark.testObservableWithCoroutineFilter":
  143.458 ±(99.9%) 7.824 ms/op [Average]
  (min, avg, max) = (133.530, 143.458, 163.894), stdev = 9.011
  CI (99.9%): [135.634, 151.283] (assumes normal distribution)


# JMH version: 1.19
# VM version: JDK 1.8.0_131, VM 25.131-b11
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/bin/java
# VM options: -Dkotlinx.coroutines.debug=off
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.RangeFilterSumBenchmark.testSequenceBuild

# Run progress: 76.00% complete, ETA 00:03:16
# Fork: 1 of 2
# Warmup Iteration   1: 15.432 ms/op
# Warmup Iteration   2: 14.776 ms/op
# Warmup Iteration   3: 13.067 ms/op
# Warmup Iteration   4: 13.189 ms/op
# Warmup Iteration   5: 13.294 ms/op
Iteration   1: 13.284 ms/op
Iteration   2: 13.006 ms/op
Iteration   3: 13.143 ms/op
Iteration   4: 13.235 ms/op
Iteration   5: 13.236 ms/op
Iteration   6: 13.094 ms/op
Iteration   7: 13.220 ms/op
Iteration   8: 13.210 ms/op
Iteration   9: 13.120 ms/op
Iteration  10: 13.222 ms/op

# Run progress: 78.00% complete, ETA 00:03:00
# Fork: 2 of 2
# Warmup Iteration   1: 15.320 ms/op
# Warmup Iteration   2: 14.528 ms/op
# Warmup Iteration   3: 13.044 ms/op
# Warmup Iteration   4: 13.094 ms/op
# Warmup Iteration   5: 12.970 ms/op
Iteration   1: 13.384 ms/op
Iteration   2: 13.151 ms/op
Iteration   3: 13.310 ms/op
Iteration   4: 13.120 ms/op
Iteration   5: 13.367 ms/op
Iteration   6: 13.054 ms/op
Iteration   7: 13.294 ms/op
Iteration   8: 13.169 ms/op
Iteration   9: 13.140 ms/op
Iteration  10: 13.167 ms/op


Result "benchmark.RangeFilterSumBenchmark.testSequenceBuild":
  13.196 ±(99.9%) 0.086 ms/op [Average]
  (min, avg, max) = (13.006, 13.196, 13.384), stdev = 0.099
  CI (99.9%): [13.110, 13.283] (assumes normal distribution)


# JMH version: 1.19
# VM version: JDK 1.8.0_131, VM 25.131-b11
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/bin/java
# VM options: -Dkotlinx.coroutines.debug=off
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.RangeFilterSumBenchmark.testSequenceGenerate

# Run progress: 80.00% complete, ETA 00:02:43
# Fork: 1 of 2
# Warmup Iteration   1: 11.066 ms/op
# Warmup Iteration   2: 9.406 ms/op
# Warmup Iteration   3: 8.985 ms/op
# Warmup Iteration   4: 9.103 ms/op
# Warmup Iteration   5: 9.091 ms/op
Iteration   1: 9.172 ms/op
Iteration   2: 9.185 ms/op
Iteration   3: 9.016 ms/op
Iteration   4: 9.012 ms/op
Iteration   5: 9.085 ms/op
Iteration   6: 9.151 ms/op
Iteration   7: 9.080 ms/op
Iteration   8: 9.079 ms/op
Iteration   9: 9.094 ms/op
Iteration  10: 9.092 ms/op

# Run progress: 82.00% complete, ETA 00:02:27
# Fork: 2 of 2
# Warmup Iteration   1: 11.236 ms/op
# Warmup Iteration   2: 9.579 ms/op
# Warmup Iteration   3: 9.085 ms/op
# Warmup Iteration   4: 9.115 ms/op
# Warmup Iteration   5: 8.962 ms/op
Iteration   1: 9.036 ms/op
Iteration   2: 9.187 ms/op
Iteration   3: 9.071 ms/op
Iteration   4: 9.129 ms/op
Iteration   5: 9.159 ms/op
Iteration   6: 9.106 ms/op
Iteration   7: 9.123 ms/op
Iteration   8: 9.282 ms/op
Iteration   9: 9.043 ms/op
Iteration  10: 9.142 ms/op


Result "benchmark.RangeFilterSumBenchmark.testSequenceGenerate":
  9.112 ±(99.9%) 0.058 ms/op [Average]
  (min, avg, max) = (9.012, 9.112, 9.282), stdev = 0.066
  CI (99.9%): [9.055, 9.170] (assumes normal distribution)


# JMH version: 1.19
# VM version: JDK 1.8.0_131, VM 25.131-b11
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/bin/java
# VM options: -Dkotlinx.coroutines.debug=off
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.RangeFilterSumBenchmark.testSequenceIntRange

# Run progress: 84.00% complete, ETA 00:02:10
# Fork: 1 of 2
# Warmup Iteration   1: 7.515 ms/op
# Warmup Iteration   2: 7.232 ms/op
# Warmup Iteration   3: 5.225 ms/op
# Warmup Iteration   4: 5.297 ms/op
# Warmup Iteration   5: 5.280 ms/op
Iteration   1: 5.367 ms/op
Iteration   2: 5.397 ms/op
Iteration   3: 5.383 ms/op
Iteration   4: 5.341 ms/op
Iteration   5: 5.382 ms/op
Iteration   6: 5.422 ms/op
Iteration   7: 5.299 ms/op
Iteration   8: 5.300 ms/op
Iteration   9: 5.293 ms/op
Iteration  10: 5.259 ms/op

# Run progress: 86.00% complete, ETA 00:01:54
# Fork: 2 of 2
# Warmup Iteration   1: 7.568 ms/op
# Warmup Iteration   2: 7.294 ms/op
# Warmup Iteration   3: 5.216 ms/op
# Warmup Iteration   4: 5.314 ms/op
# Warmup Iteration   5: 5.201 ms/op
Iteration   1: 5.209 ms/op
Iteration   2: 5.206 ms/op
Iteration   3: 5.301 ms/op
Iteration   4: 5.346 ms/op
Iteration   5: 5.178 ms/op
Iteration   6: 5.261 ms/op
Iteration   7: 5.324 ms/op
Iteration   8: 5.296 ms/op
Iteration   9: 5.232 ms/op
Iteration  10: 5.234 ms/op


Result "benchmark.RangeFilterSumBenchmark.testSequenceIntRange":
  5.301 ±(99.9%) 0.060 ms/op [Average]
  (min, avg, max) = (5.178, 5.301, 5.422), stdev = 0.069
  CI (99.9%): [5.241, 5.361] (assumes normal distribution)


# JMH version: 1.19
# VM version: JDK 1.8.0_131, VM 25.131-b11
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/bin/java
# VM options: -Dkotlinx.coroutines.debug=off
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.RangeFilterSumBenchmark.testSource

# Run progress: 88.00% complete, ETA 00:01:37
# Fork: 1 of 2
# Warmup Iteration   1: 35.196 ms/op
# Warmup Iteration   2: 34.257 ms/op
# Warmup Iteration   3: 32.803 ms/op
# Warmup Iteration   4: 25.664 ms/op
# Warmup Iteration   5: 24.112 ms/op
Iteration   1: 22.915 ms/op
Iteration   2: 22.313 ms/op
Iteration   3: 22.560 ms/op
Iteration   4: 22.293 ms/op
Iteration   5: 23.025 ms/op
Iteration   6: 24.190 ms/op
Iteration   7: 24.005 ms/op
Iteration   8: 21.814 ms/op
Iteration   9: 22.308 ms/op
Iteration  10: 23.334 ms/op

# Run progress: 90.00% complete, ETA 00:01:21
# Fork: 2 of 2
# Warmup Iteration   1: 29.780 ms/op
# Warmup Iteration   2: 33.184 ms/op
# Warmup Iteration   3: 27.915 ms/op
# Warmup Iteration   4: 27.266 ms/op
# Warmup Iteration   5: 23.687 ms/op
Iteration   1: 22.939 ms/op
Iteration   2: 22.289 ms/op
Iteration   3: 22.452 ms/op
Iteration   4: 22.237 ms/op
Iteration   5: 22.834 ms/op
Iteration   6: 22.825 ms/op
Iteration   7: 22.971 ms/op
Iteration   8: 22.822 ms/op
Iteration   9: 22.301 ms/op
Iteration  10: 22.603 ms/op


Result "benchmark.RangeFilterSumBenchmark.testSource":
  22.752 ±(99.9%) 0.507 ms/op [Average]
  (min, avg, max) = (21.814, 22.752, 24.190), stdev = 0.584
  CI (99.9%): [22.244, 23.259] (assumes normal distribution)


# JMH version: 1.19
# VM version: JDK 1.8.0_131, VM 25.131-b11
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/bin/java
# VM options: -Dkotlinx.coroutines.debug=off
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.RangeFilterSumBenchmark.testSourceThread

# Run progress: 92.00% complete, ETA 00:01:05
# Fork: 1 of 2
# Warmup Iteration   1: 5176.643 ms/op
# Warmup Iteration   2: 4986.523 ms/op
# Warmup Iteration   3: 5041.684 ms/op
# Warmup Iteration   4: 4883.466 ms/op
# Warmup Iteration   5: 4910.703 ms/op
Iteration   1: 4911.772 ms/op
Iteration   2: 5026.193 ms/op
Iteration   3: 5115.734 ms/op
Iteration   4: 5139.473 ms/op
Iteration   5: 4930.667 ms/op
Iteration   6: 4905.288 ms/op
Iteration   7: 4938.687 ms/op
Iteration   8: 4814.712 ms/op
Iteration   9: 4954.521 ms/op
Iteration  10: 5071.720 ms/op

# Run progress: 94.00% complete, ETA 00:00:52
# Fork: 2 of 2
# Warmup Iteration   1: 5387.521 ms/op
# Warmup Iteration   2: 5068.410 ms/op
# Warmup Iteration   3: 4899.355 ms/op
# Warmup Iteration   4: 4837.845 ms/op
# Warmup Iteration   5: 4807.711 ms/op
Iteration   1: 4860.229 ms/op
Iteration   2: 4816.101 ms/op
Iteration   3: 4827.095 ms/op
Iteration   4: 5136.072 ms/op
Iteration   5: 5129.180 ms/op
Iteration   6: 5142.745 ms/op
Iteration   7: 5032.640 ms/op
Iteration   8: 4764.993 ms/op
Iteration   9: 4815.331 ms/op
Iteration  10: 4816.819 ms/op


Result "benchmark.RangeFilterSumBenchmark.testSourceThread":
  4957.499 ±(99.9%) 113.928 ms/op [Average]
  (min, avg, max) = (4764.993, 4957.499, 5142.745), stdev = 131.199
  CI (99.9%): [4843.571, 5071.426] (assumes normal distribution)


# JMH version: 1.19
# VM version: JDK 1.8.0_131, VM 25.131-b11
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/bin/java
# VM options: -Dkotlinx.coroutines.debug=off
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.RangeFilterSumBenchmark.testSourceThreadBuffer128

# Run progress: 96.00% complete, ETA 00:00:37
# Fork: 1 of 2
# Warmup Iteration   1: 507.623 ms/op
# Warmup Iteration   2: 452.165 ms/op
# Warmup Iteration   3: 435.248 ms/op
# Warmup Iteration   4: 445.268 ms/op
# Warmup Iteration   5: 451.267 ms/op
Iteration   1: 434.448 ms/op
Iteration   2: 458.508 ms/op
Iteration   3: 456.523 ms/op
Iteration   4: 452.294 ms/op
Iteration   5: 441.291 ms/op
Iteration   6: 454.972 ms/op
Iteration   7: 456.334 ms/op
Iteration   8: 431.271 ms/op
Iteration   9: 445.710 ms/op
Iteration  10: 424.940 ms/op

# Run progress: 98.00% complete, ETA 00:00:18
# Fork: 2 of 2
# Warmup Iteration   1: 461.117 ms/op
# Warmup Iteration   2: 473.049 ms/op
# Warmup Iteration   3: 452.464 ms/op
# Warmup Iteration   4: 464.519 ms/op
# Warmup Iteration   5: 449.983 ms/op
Iteration   1: 450.914 ms/op
Iteration   2: 445.828 ms/op
Iteration   3: 463.309 ms/op
Iteration   4: 465.714 ms/op
Iteration   5: 416.342 ms/op
Iteration   6: 442.145 ms/op
Iteration   7: 445.819 ms/op
Iteration   8: 450.061 ms/op
Iteration   9: 450.375 ms/op
Iteration  10: 438.596 ms/op


Result "benchmark.RangeFilterSumBenchmark.testSourceThreadBuffer128":
  446.270 ±(99.9%) 10.923 ms/op [Average]
  (min, avg, max) = (416.342, 446.270, 465.714), stdev = 12.578
  CI (99.9%): [435.347, 457.192] (assumes normal distribution)


# Run complete. Total time: 00:15:38

Benchmark                                                             Mode  Cnt     Score     Error  Units
RangeFilterSumBenchmark.testBaselineLoop                              avgt   20     0.908 ±   0.008  ms/op
RangeFilterSumBenchmark.testChannelPipeline                           avgt   20  1336.445 ±  26.018  ms/op
RangeFilterSumBenchmark.testChannelPipelineUnconfined                 avgt   20   326.302 ±   3.247  ms/op
RangeFilterSumBenchmark.testFlowable                                  avgt   20     4.459 ±   0.054  ms/op
RangeFilterSumBenchmark.testFlowableFromCoroutinePublish              avgt   20    27.715 ±   0.263  ms/op
RangeFilterSumBenchmark.testFlowableFromCoroutinePublishUnconfined    avgt   20    29.386 ±   0.978  ms/op
RangeFilterSumBenchmark.testFlowableThread                            avgt   20     5.842 ±   0.035  ms/op
RangeFilterSumBenchmark.testFlowableWithCoroutineFilter               avgt   20   305.200 ±   3.496  ms/op
RangeFilterSumBenchmark.testFlux                                      avgt   20     4.253 ±   0.183  ms/op
RangeFilterSumBenchmark.testFluxFromCoroutinePublish                  avgt   20    25.182 ±   0.667  ms/op
RangeFilterSumBenchmark.testFluxFromCoroutinePublishUnconfined        avgt   20    25.647 ±   0.502  ms/op
RangeFilterSumBenchmark.testFluxThread                                avgt   20     7.315 ±   0.115  ms/op
RangeFilterSumBenchmark.testFluxWithCoroutineFilter                   avgt   20   306.519 ±   4.996  ms/op
RangeFilterSumBenchmark.testJavaStream                                avgt   20     7.649 ±   0.054  ms/op
RangeFilterSumBenchmark.testObservable                                avgt   20     4.601 ±   0.334  ms/op
RangeFilterSumBenchmark.testObservableFromCoroutinePublish            avgt   20    25.704 ±   0.419  ms/op
RangeFilterSumBenchmark.testObservableFromCoroutinePublishUnconfined  avgt   20    26.255 ±   0.727  ms/op
RangeFilterSumBenchmark.testObservableThread                          avgt   20     6.627 ±   0.048  ms/op
RangeFilterSumBenchmark.testObservableWithCoroutineFilter             avgt   20   143.458 ±   7.824  ms/op
RangeFilterSumBenchmark.testSequenceBuild                             avgt   20    13.196 ±   0.086  ms/op
RangeFilterSumBenchmark.testSequenceGenerate                          avgt   20     9.112 ±   0.058  ms/op
RangeFilterSumBenchmark.testSequenceIntRange                          avgt   20     5.301 ±   0.060  ms/op
RangeFilterSumBenchmark.testSource                                    avgt   20    22.752 ±   0.507  ms/op
RangeFilterSumBenchmark.testSourceThread                              avgt   20  4957.499 ± 113.928  ms/op
RangeFilterSumBenchmark.testSourceThreadBuffer128                     avgt   20   446.270 ±  10.923  ms/op
